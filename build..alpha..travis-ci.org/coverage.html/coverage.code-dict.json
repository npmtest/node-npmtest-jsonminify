{"/home/travis/build/npmtest/node-npmtest-jsonminify/test.js":"/* istanbul instrument in package npmtest_jsonminify */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-jsonminify/lib.npmtest_jsonminify.js":"/* istanbul instrument in package npmtest_jsonminify */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_jsonminify = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_jsonminify = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-jsonminify/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-jsonminify && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_jsonminify */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_jsonminify\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_jsonminify.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_jsonminify.rollup.js'] =\n            local.assetsDict['/assets.npmtest_jsonminify.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_jsonminify.__dirname +\n                    '/lib.npmtest_jsonminify.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-jsonminify/node_modules/jsonminify/minify.json.js":"/*! JSON.minify()\n    v0.1 (c) Kyle Simpson\n    MIT License\n*/\n/**\n * @name minify.json.js\n * @author Kei Funagayama <kei.topaz@gmail.com\n * @overview JSON.minify\n */\n\n/**\n * @namespace JSON\n */\n(function(global){\n    'use strict';\n\n    /**\n     * @function\n     * @memberof JSON\n     * @param {Object} Transformed data. format) json-like\n     * @return {String}\n     *\n     * @example\n     * var json = { // hoge\n     *     \"foo\": \"bar\",// this is cool\n     *     \"bar\": [\n     *         \"baz\", \"bum\", \"zam\"   // this is cool\n     *     ]\n     * } // hoge\n     *\n     */\n    var minify = function (json) {\n\n        var tokenizer = /\"|(\\/\\*)|(\\*\\/)|(\\/\\/)|\\n|\\r|\\[|]/g,\n            in_string = false,\n            in_multiline_comment = false,\n            in_singleline_comment = false,\n            tmp, tmp2, new_str = [], ns = 0, from = 0, lc, rc\n        ;\n\n        tokenizer.lastIndex = 0;\n\n        while ( tmp = tokenizer.exec(json) ) {\n            lc = RegExp.leftContext;\n            rc = RegExp.rightContext;\n            if (!in_multiline_comment && !in_singleline_comment) {\n                tmp2 = lc.substring(from);\n                if (!in_string) {\n                    tmp2 = tmp2.replace(/(\\n|\\r|\\s)*/g,\"\");\n                }\n                new_str[ns++] = tmp2;\n            }\n            from = tokenizer.lastIndex;\n\n            if (tmp[0] === \"\\\"\" && !in_multiline_comment && !in_singleline_comment) {\n                tmp2 = lc.match(/(\\\\)*$/);\n                if (!in_string || !tmp2 || (tmp2[0].length % 2) === 0) {    // start of string with \", or unescaped \" character found to end string\n                    in_string = !in_string;\n                }\n                from--; // include \" character in next catch\n                rc = json.substring(from);\n            }\n            else if (tmp[0] === \"/*\" && !in_string && !in_multiline_comment && !in_singleline_comment) {\n                in_multiline_comment = true;\n            }\n            else if (tmp[0] === \"*/\" && !in_string && in_multiline_comment && !in_singleline_comment) {\n                in_multiline_comment = false;\n            }\n            else if (tmp[0] === \"//\" && !in_string && !in_multiline_comment && !in_singleline_comment) {\n                in_singleline_comment = true;\n            }\n            else if ((tmp[0] === \"\\n\" || tmp[0] === \"\\r\") && !in_string && !in_multiline_comment && in_singleline_comment) {\n                in_singleline_comment = false;\n            }\n            else if (!in_multiline_comment && !in_singleline_comment && !(/\\n|\\r|\\s/.test(tmp[0]))) {\n                new_str[ns++] = tmp[0];\n            }\n        }\n        new_str[ns++] = rc;\n        return new_str.join(\"\");\n    };\n\n    if (typeof module !== 'undefined' && module.exports) {\n        // node\n        module.exports = minify;\n        JSON.minify = minify;\n    } else {\n        // others, export global\n        if (typeof global.JSON === \"undefined\" || !global.JSON) {\n            global.JSON = {};\n        }\n        global.JSON.minify = minify;\n    }\n})(this);\n","/home/travis/build/npmtest/node-npmtest-jsonminify/node_modules/jsonminify/report/report.history.js":"__history = [{\"date\":\"Mon, 30 Sep 2013 05:18:25 GMT\",\"total\":{\"sloc\":66,\"maintainability\":48.77297000310815},\"average\":{\"sloc\":66,\"maintainability\":\"48.77\"}},{\"date\":\"Mon, 30 Sep 2013 05:19:34 GMT\",\"total\":{\"sloc\":66,\"maintainability\":48.77297000310815},\"average\":{\"sloc\":66,\"maintainability\":\"48.77\"}},{\"date\":\"Mon, 30 Sep 2013 05:19:49 GMT\",\"total\":{\"sloc\":66,\"maintainability\":48.77297000310815},\"average\":{\"sloc\":66,\"maintainability\":\"48.77\"}},{\"date\":\"Mon, 30 Sep 2013 05:19:53 GMT\",\"total\":{\"sloc\":66,\"maintainability\":48.77297000310815},\"average\":{\"sloc\":66,\"maintainability\":\"48.77\"}},{\"date\":\"Mon, 30 Sep 2013 05:20:37 GMT\",\"total\":{\"sloc\":66,\"maintainability\":48.77297000310815},\"average\":{\"sloc\":66,\"maintainability\":\"48.77\"}},{\"date\":\"Mon, 30 Sep 2013 05:20:48 GMT\",\"total\":{\"sloc\":66,\"maintainability\":48.77297000310815},\"average\":{\"sloc\":66,\"maintainability\":\"48.77\"}},{\"date\":\"Mon, 30 Sep 2013 05:20:52 GMT\",\"total\":{\"sloc\":66,\"maintainability\":48.77297000310815},\"average\":{\"sloc\":66,\"maintainability\":\"48.77\"}},{\"date\":\"Mon, 30 Sep 2013 05:21:09 GMT\",\"total\":{\"sloc\":66,\"maintainability\":48.77297000310815},\"average\":{\"sloc\":66,\"maintainability\":\"48.77\"}},{\"date\":\"Mon, 30 Sep 2013 05:31:53 GMT\",\"total\":{\"sloc\":81,\"maintainability\":48.77297000310815},\"average\":{\"sloc\":81,\"maintainability\":\"48.77\"}},{\"date\":\"Mon, 30 Sep 2013 05:34:35 GMT\",\"total\":{\"sloc\":81,\"maintainability\":48.77297000310815},\"average\":{\"sloc\":81,\"maintainability\":\"48.77\"}},{\"date\":\"Mon, 30 Sep 2013 05:35:47 GMT\",\"total\":{\"sloc\":81,\"maintainability\":48.77297000310815},\"average\":{\"sloc\":81,\"maintainability\":\"48.77\"}},{\"date\":\"Mon, 30 Sep 2013 05:37:30 GMT\",\"total\":{\"sloc\":81,\"maintainability\":48.77297000310815},\"average\":{\"sloc\":81,\"maintainability\":\"48.77\"}},{\"date\":\"Wed, 02 Mar 2016 06:23:55 GMT\",\"total\":{\"sloc\":81,\"maintainability\":48.77297000310815},\"average\":{\"sloc\":81,\"maintainability\":\"48.77\"}},{\"date\":\"Wed, 02 Mar 2016 06:36:19 GMT\",\"total\":{\"sloc\":81,\"maintainability\":48.77297000310815},\"average\":{\"sloc\":81,\"maintainability\":\"48.77\"}},{\"date\":\"Wed, 02 Mar 2016 06:36:50 GMT\",\"total\":{\"sloc\":81,\"maintainability\":48.77297000310815},\"average\":{\"sloc\":81,\"maintainability\":\"48.77\"}}]","/home/travis/build/npmtest/node-npmtest-jsonminify/node_modules/jsonminify/report/report.js":"__report = {\"summary\":{\"total\":{\"jshint\":1,\"sloc\":81,\"maintainability\":48.77297000310815},\"average\":{\"sloc\":81,\"maintainability\":\"48.77\",\"jshint\":\"1.00\"}},\"reports\":[{\"info\":{\"file\":\"minify.json.js\",\"fileShort\":\"minify.json.js\",\"fileSafe\":\"minify_json_js\",\"link\":\"files/minify_json_js/index.html\"},\"jshint\":{\"messages\":1},\"complexity\":{\"aggregate\":{\"sloc\":{\"logical\":55,\"physical\":81},\"cyclomatic\":17,\"halstead\":{\"operators\":{\"distinct\":20,\"total\":154,\"identifiers\":[\"__stripped__\"]},\"operands\":{\"distinct\":47,\"total\":152,\"identifiers\":[\"__stripped__\"]},\"length\":306,\"vocabulary\":67,\"difficulty\":32.34042553191489,\"volume\":1856.2232922800783,\"effort\":60031.05115458976,\"bugs\":0.6187410974266928,\"time\":3335.058397477209},\"params\":2,\"line\":14,\"cyclomaticDensity\":30.909090909090907,\"complexity\":{\"cyclomatic\":17,\"sloc\":{\"logical\":55,\"physical\":81},\"halstead\":{\"operators\":{\"distinct\":20,\"total\":154,\"identifiers\":[\"__stripped__\"]},\"operands\":{\"distinct\":47,\"total\":152,\"identifiers\":[\"__stripped__\"]},\"length\":306,\"vocabulary\":67,\"difficulty\":32.34042553191489,\"volume\":1856.2232922800783,\"effort\":60031.05115458976,\"bugs\":0.6187410974266928,\"time\":3335.058397477209}}},\"module\":\"minify.json.js\",\"maintainability\":48.77297000310815}}]}"}